apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mirrord-operator
    component: operator
    app.kubernetes.io/component: operator
    {{- include "mirrord-operator.labels" . | nindent 4 }}
  name: mirrord-operator
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: mirrord-operator
  template:
    metadata:
      labels:
        {{- include "mirrord-operator.labels" . | nindent 8 }}
        app: mirrord-operator
        component: operator
        app.kubernetes.io/component: operator
        {{- if .Values.operator.podLabels }}
          {{- toYaml .Values.operator.podLabels | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.operator.podAnnotations }}
          {{- toYaml .Values.operator.podAnnotations | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.operator.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.operator.imagePullSecrets }}
        - {{ toYaml . }}
        {{- end }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        {{/* Allow low port using ip_unprivileged_port_start */}}
        {{- if lt (int .Values.operator.port) 1024 -}}
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: {{ .Values.operator.port | quote}}
        {{- end }}
      {{- if .Values.operator.tolerations }}
      tolerations:
        {{- toYaml .Values.operator.tolerations | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.nodeSelector }}
      nodeSelector:
        {{- toYaml . | trim | nindent 8 }}
      {{- end }}
      {{- with .Values.operator.affinity }}
      affinity:
        {{- toYaml . | trim | nindent 8 }}
      {{- end }}
      containers:
      - env:
        - name: RUST_LOG
          value: mirrord=info,operator=info
        - name: OPERATOR_ADDR
          value: {{ printf "0.0.0.0:%d" (int .Values.operator.port ) }}
        - name: OPERATOR_NAMESPACE
          value: {{ .Values.namespace }}
        - name: OPERATOR_SERVICE_NAME
          value: mirrord-operator
        - name: OPERATOR_TELEMETRY_ENABLED
          value: {{ .Values.operator.disableTelemetries | ternary "false" "true" | quote }}
        {{ if .Values.operator.maxSessionTimeSeconds }}
        - name: OPERATOR_MAX_SESSION_TIME_SECONDS
          value: {{ .Values.operator.maxSessionTimeSeconds | quote }}
        {{- end }}
        - name: OPERATOR_SQS_SPLITTING
          value: {{ .Values.operator.sqsSplitting | ternary "true" "false" | quote }}
        - name: OPERATOR_KAFKA_SPLITTING
          value: {{ .Values.operator.kafkaSplitting | ternary "true" "false" | quote }}
        {{- if .Values.operator.applicationPauseAutoSync }}
        - name: OPERATOR_APPLICATION_PAUSE_AUTO_SYNC
          value: "true"
        {{- end }}
        - name: OPERATOR_JSON_LOG
          value: {{ .Values.operator.jsonLog | ternary "true" "false" | quote }}
        - name: OPERATOR_AGENT_CONFIG
          value: /mirrord-config/agent-config.yaml
        {{- if or (index .Values.tls.data "tls.key") .Values.tls.certManager.enabled }}
        - name: OPERATOR_TLS_CERT_PATH
          value: /tls/tls.crt
        - name: OPERATOR_TLS_KEY_PATH
          value: /tls/tls.key
        {{- end }}
        {{- if or .Values.license.file.data .Values.license.pemRef }}
        - name: OPERATOR_LICENSE_PATH
          value: /license/license.pem
        {{- else if .Values.license.key }}
        {{- if .Values.agent.tls }}
        - name: OPERATOR_AGENT_CONNECTION_TLS
          value: "true"
        {{- end }}
        {{- if .Values.operator.noPodTargetsSessionTimeoutMillis }}
        - name: OPERATOR_NO_POD_TARGETS_SESSION_TIMEOUT_MILLIS
          value: {{ .Values.operator.noPodTargetsSessionTimeoutMillis | quote }}
        {{- end }}
        envFrom:
        - secretRef:
            name: {{ .Values.license.file.secret }}
        {{- else if .Values.license.keyRef }}
        envFrom:
        - secretRef:
            name: {{ .Values.license.keyRef }}
        {{- else }}
          {{- required "Either keyRef, pemRef, file or key value is required for license!" .Values.license.keyRef }}
        {{- end }}
        image: {{ .Values.operator.image }}:{{ .Chart.AppVersion }}
        imagePullPolicy: IfNotPresent
        {{- if .Values.operator.containerArgs }}
        args:
          {{- range .Values.operator.containerArgs }}
          - {{ toYaml . }}
          {{- end }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: {{ .Values.operator.port }}
            scheme: HTTPS
          periodSeconds: 5
        name: mirrord-operator
        ports:
        - containerPort: {{ .Values.operator.port }}
          name: https
        readinessProbe:
          httpGet:
            path: /health
            port: {{ .Values.operator.port }}
            scheme: HTTPS
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: {{.Values.operator.limits.cpu}}
            memory: {{.Values.operator.limits.memory}}
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
        volumeMounts:
        {{- if or (index .Values.tls.data "tls.key") .Values.tls.certManager.enabled }}
        - mountPath: /tls
          name: tls-volume
        {{- end }}
        - mountPath: /mirrord-config
          name: mirrord-config-volume
        {{- if or .Values.license.file.data .Values.license.pemRef }}
        - mountPath: /license
          name: license-volume
        {{- end }}
        # needed for the operator to download and use CA
        - mountPath: /tmp
          name: tmp
      serviceAccountName: {{ .Values.sa.name }}
      volumes:
      - name: mirrord-config-volume
        configMap:
          name: mirrord-configmap
      {{- if or (index .Values.tls.data "tls.key") .Values.tls.certManager.enabled }}
      - name: tls-volume
        secret:
          secretName: {{ .Values.tls.secret }}
      {{- end }}
      {{- if .Values.license.file.data }}
      - name: license-volume
        secret:
          secretName: {{ .Values.license.file.secret }}
      {{- end }}
      {{- if .Values.license.pemRef }}
      - name: license-volume
        secret:
          secretName: {{ .Values.license.pemRef }}
      {{- end }}
      - emptyDir: {}
        name: tmp
